{"version":3,"sources":["webpack:///./src/pages/search.js"],"names":["SearchPage","props","_this","_React$Component","call","this","getOrCreateIndex","index","Index","load","data","siteSearchIndex","state","query","results","search","_this2","expand","map","_ref2","ref","documentStore","getDoc","componentDidMount","queryString","parse","location","setState","getDerivedStateFromProps","nextProps","prevState","componentDidUpdate","prevProps","render","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_3__","_components_layout__WEBPACK_IMPORTED_MODULE_6__","_components_seo__WEBPACK_IMPORTED_MODULE_7__","title","keywords","page","key","slug","gatsby__WEBPACK_IMPORTED_MODULE_5__","css","_ref","to","content","split","slice","join","React","Component"],"mappings":"+TASqBA,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OACjBA,EAAAC,EAAAC,KAAAC,KAAMJ,IAANI,MAOFC,iBAAmB,kBACjBJ,EAAKK,MACDL,EAAKK,MAELC,QAAMC,KAAKP,EAAKD,MAAMS,KAAKC,gBAAgBJ,QAV/CL,EAAKU,MAAQ,CACXC,MAAO,GACPC,QAAS,IAJMZ,sCAcnBa,OAAA,SAAOF,GAAO,IAAAG,EAAAX,KAQZ,OAPAA,KAAKE,MAAQF,KAAKC,mBACFD,KAAKE,MAElBQ,OAAOF,EAAO,CAAEI,QAAQ,IAExBC,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,IAAH,OAAaJ,EAAKT,MAAMc,cAAcC,OAAOF,QAKtDG,kBAAA,WACE,IACMV,EADKW,IAAYC,MAAMpB,KAAKJ,MAAMyB,SAASX,QAChCF,MACXC,EAAUT,KAAKU,OAAOF,GAC5BR,KAAKsB,SAAS,CACZd,MAAOA,EACPC,QAASA,OAINc,yBAAP,SAAgCC,EAAWC,GACzC,OAAID,EAAUH,SAASX,SAAWe,EAAUjB,MAGnC,CAAEA,MAFEW,IAAYC,MAAMI,EAAUH,SAASX,QAC/BF,OAGV,QAIXkB,mBAAA,SAAmBC,GACjB,GAAIA,EAAUN,SAASX,SAAWV,KAAKJ,MAAMyB,SAASX,OAAQ,CAC5D,IACMF,EADKW,IAAYC,MAAMpB,KAAKJ,MAAMyB,SAASX,QAChCF,MACXC,EAAUT,KAAKU,OAAOF,GAC5BR,KAAKsB,SAAS,CACZd,MAAOA,EACPC,QAASA,QAKfmB,OAAA,WACE,OACEC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,KACEF,OAAAC,EAAA,EAAAD,CAACG,EAAA,EAAD,CAAKC,MAAM,SAASC,SAAU,oBAC9BL,OAAAC,EAAA,EAAAD,CAAA,iCAAyB7B,KAAKO,MAAMC,OACnCR,KAAKO,MAAME,QAAQI,IAAI,SAAAsB,GAAI,OAC1BN,OAAAC,EAAA,EAAAD,CAAA,MAAIO,IAAKD,EAAKE,MACZR,OAAAC,EAAA,EAAAD,CAAA,UACEA,OAAAC,EAAA,EAAAD,CAACS,EAAA,KAAD,CACEC,IAAGC,EAGHC,GAAIN,EAAKE,MAERF,EAAKF,QAGVJ,OAAAC,EAAA,EAAAD,CAAA,SACGM,EAAKO,QACHC,MAAM,KACNC,MAAM,EAAG,IACTC,KAAK,KAAO,gBA/EWC,IAAMC,WAwFjCvC,EAAK","file":"component---src-pages-search-js-3402c111f9539f0a8933.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"gatsby\";\r\nimport { css } from \"@emotion/core\";\r\nimport Layout from \"../components/layout\";\r\nimport SEO from \"../components/seo\";\r\nimport { Index } from \"elasticlunr\";\r\nimport { graphql } from \"gatsby\";\r\nimport queryString from \"query-string\";\r\n\r\nexport default class SearchPage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      query: \"\",\r\n      results: []\r\n    };\r\n  }\r\n\r\n  getOrCreateIndex = () =>\r\n    this.index\r\n      ? this.index\r\n      : // Create an elastic lunr index and hydrate with graphql query results\r\n        Index.load(this.props.data.siteSearchIndex.index);\r\n\r\n  search(query) {\r\n    this.index = this.getOrCreateIndex();\r\n    const results = this.index\r\n      // Query the index with search string to get an [] of IDs\r\n      .search(query, { expand: true })\r\n      // Map over each ID and return the full document\r\n      .map(({ ref }) => this.index.documentStore.getDoc(ref));\r\n\r\n    return results;\r\n  }\r\n\r\n  componentDidMount() {\r\n    const qs = queryString.parse(this.props.location.search);\r\n    const query = qs.query;\r\n    const results = this.search(query);\r\n    this.setState({\r\n      query: query,\r\n      results: results\r\n    });\r\n  }\r\n\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    if (nextProps.location.search !== prevState.query) {\r\n      const qs = queryString.parse(nextProps.location.search);\r\n      const query = qs.query;\r\n      return { query: query };\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.location.search !== this.props.location.search) {\r\n      const qs = queryString.parse(this.props.location.search);\r\n      const query = qs.query;\r\n      const results = this.search(query);\r\n      this.setState({\r\n        query: query,\r\n        results: results\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        <SEO title=\"Search\" keywords={[`search`, `ICAT`]} />\r\n        <h1>Search Results for: {this.state.query}</h1>\r\n        {this.state.results.map(page => (\r\n          <li key={page.slug}>\r\n            <h2>\r\n              <Link\r\n                css={css`\r\n                  color: green;\r\n                `}\r\n                to={page.slug}\r\n              >\r\n                {page.title}\r\n              </Link>\r\n            </h2>\r\n            <p>\r\n              {page.content\r\n                .split(\" \")\r\n                .slice(0, 55)\r\n                .join(\" \") + \" ...\"}\r\n            </p>\r\n          </li>\r\n        ))}\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport const query = graphql`\r\n  query SearchIndexQuery {\r\n    siteSearchIndex {\r\n      index\r\n    }\r\n  }\r\n`;\r\n"],"sourceRoot":""}