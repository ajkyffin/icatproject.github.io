{"version":3,"sources":["webpack:///./src/pages/search.js"],"names":["SearchPage","props","_this","_React$Component","call","this","getOrCreateIndex","index","Index","load","data","siteSearchIndex","state","query","results","search","_this2","expand","map","_ref2","ref","documentStore","getDoc","componentDidMount","queryString","parse","location","setState","getDerivedStateFromProps","nextProps","prevState","componentDidUpdate","prevProps","render","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_3__","_components_layout__WEBPACK_IMPORTED_MODULE_6__","_components_seo__WEBPACK_IMPORTED_MODULE_7__","title","keywords","page","key","slug","gatsby__WEBPACK_IMPORTED_MODULE_5__","css","_ref","to","content","split","slice","join","React","Component"],"mappings":"+TASqBA,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OACjBA,EAAAC,EAAAC,KAAAC,KAAMJ,IAANI,MAOFC,iBAAmB,kBACjBJ,EAAKK,MACDL,EAAKK,MAELC,QAAMC,KAAKP,EAAKD,MAAMS,KAAKC,gBAAgBJ,QAV/CL,EAAKU,MAAQ,CACXC,MAAO,GACPC,QAAS,IAJMZ,sCAcnBa,OAAA,SAAOF,GAAO,IAAAG,EAAAX,KAQZ,OAPAA,KAAKE,MAAQF,KAAKC,mBACFD,KAAKE,MAElBQ,OAAOF,EAAO,CAAEI,QAAQ,IAExBC,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,IAAH,OAAaJ,EAAKT,MAAMc,cAAcC,OAAOF,QAKtDG,kBAAA,WACE,IACMV,EADKW,IAAYC,MAAMpB,KAAKJ,MAAMyB,SAASX,QAChCF,MACXC,EAAUT,KAAKU,OAAOF,GAC5BR,KAAKsB,SAAS,CACZd,MAAOA,EACPC,QAASA,OAINc,yBAAP,SAAgCC,EAAWC,GACzC,OAAID,EAAUH,SAASX,SAAWe,EAAUjB,MAGnC,CAAEA,MAFEW,IAAYC,MAAMI,EAAUH,SAASX,QAC/BF,OAGV,QAIXkB,mBAAA,SAAmBC,GACjB,GAAIA,EAAUN,SAASX,SAAWV,KAAKJ,MAAMyB,SAASX,OAAQ,CAC5D,IACMF,EADKW,IAAYC,MAAMpB,KAAKJ,MAAMyB,SAASX,QAChCF,MACXC,EAAUT,KAAKU,OAAOF,GAC5BR,KAAKsB,SAAS,CACZd,MAAOA,EACPC,QAASA,QAKfmB,OAAA,WACE,OACEC,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,KACEF,OAAAC,EAAA,EAAAD,CAACG,EAAA,EAAD,CAAKC,MAAM,SAASC,SAAU,oBAC9BL,OAAAC,EAAA,EAAAD,CAAA,iCAAyB7B,KAAKO,MAAMC,OACnCR,KAAKO,MAAME,QAAQI,IAAI,SAAAsB,GAAI,OAC1BN,OAAAC,EAAA,EAAAD,CAAA,MAAIO,IAAKD,EAAKE,MACZR,OAAAC,EAAA,EAAAD,CAAA,UACEA,OAAAC,EAAA,EAAAD,CAACS,EAAA,KAAD,CACEC,IAAGC,EAGHC,GAAIN,EAAKE,MAERF,EAAKF,QAGVJ,OAAAC,EAAA,EAAAD,CAAA,SACGM,EAAKO,QACHC,MAAM,KACNC,MAAM,EAAG,IACTC,KAAK,KAAO,gBA/EWC,IAAMC,WAwFjCvC,EAAK","file":"component---src-pages-search-js-4e445b2fe8ed8c62fe1e.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"gatsby\";\nimport { css } from \"@emotion/core\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport { Index } from \"elasticlunr\";\nimport { graphql } from \"gatsby\";\nimport queryString from \"query-string\";\n\nexport default class SearchPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      query: \"\",\n      results: []\n    };\n  }\n\n  getOrCreateIndex = () =>\n    this.index\n      ? this.index\n      : // Create an elastic lunr index and hydrate with graphql query results\n        Index.load(this.props.data.siteSearchIndex.index);\n\n  search(query) {\n    this.index = this.getOrCreateIndex();\n    const results = this.index\n      // Query the index with search string to get an [] of IDs\n      .search(query, { expand: true })\n      // Map over each ID and return the full document\n      .map(({ ref }) => this.index.documentStore.getDoc(ref));\n\n    return results;\n  }\n\n  componentDidMount() {\n    const qs = queryString.parse(this.props.location.search);\n    const query = qs.query;\n    const results = this.search(query);\n    this.setState({\n      query: query,\n      results: results\n    });\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.location.search !== prevState.query) {\n      const qs = queryString.parse(nextProps.location.search);\n      const query = qs.query;\n      return { query: query };\n    } else {\n      return null;\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.location.search !== this.props.location.search) {\n      const qs = queryString.parse(this.props.location.search);\n      const query = qs.query;\n      const results = this.search(query);\n      this.setState({\n        query: query,\n        results: results\n      });\n    }\n  }\n\n  render() {\n    return (\n      <Layout>\n        <SEO title=\"Search\" keywords={[`search`, `ICAT`]} />\n        <h1>Search Results for: {this.state.query}</h1>\n        {this.state.results.map(page => (\n          <li key={page.slug}>\n            <h2>\n              <Link\n                css={css`\n                  color: green;\n                `}\n                to={page.slug}\n              >\n                {page.title}\n              </Link>\n            </h2>\n            <p>\n              {page.content\n                .split(\" \")\n                .slice(0, 55)\n                .join(\" \") + \" ...\"}\n            </p>\n          </li>\n        ))}\n      </Layout>\n    );\n  }\n}\n\nexport const query = graphql`\n  query SearchIndexQuery {\n    siteSearchIndex {\n      index\n    }\n  }\n`;\n"],"sourceRoot":""}