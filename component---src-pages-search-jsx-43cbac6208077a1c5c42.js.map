{"version":3,"sources":["webpack:///./src/pages/search.jsx"],"names":["SearchPage","props","_this","_React$Component","call","this","state","query","results","componentDidMount","location","queryString","parse","search","setState","getDerivedStateFromProps","nextProps","prevState","getOrCreateIndex","data","index","Index","load","siteSearchIndex","_this2","expand","map","_ref3","ref","documentStore","getDoc","render","_this$state","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_2__","_components_layout__WEBPACK_IMPORTED_MODULE_8__","_components_seo__WEBPACK_IMPORTED_MODULE_9__","title","keywords","page","key","slug","gatsby__WEBPACK_IMPORTED_MODULE_5__","css","_ref","to","excerpt","_ref2","React","Component","propTypes","PropTypes","shape","isRequired","string"],"mappings":"iXASqBA,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OACjBA,EAAAC,EAAAC,KAAAC,KAAMJ,IAANI,MACKC,MAAQ,CACXC,MAAO,GACPC,QAAS,IAJMN,sCAQnBO,kBAAA,WAAoB,IACVC,EAAaL,KAAKJ,MAAlBS,SAEAH,EADGI,IAAYC,MAAMF,EAASG,QAC9BN,MACFC,EAAUH,KAAKQ,OAAON,GAC5BF,KAAKS,SAAS,CACZP,QACAC,eAIGO,yBAAP,SAAgCC,EAAWC,GACzC,OAAID,EAAUN,SAASG,SAAWI,EAAUV,MAGnC,CAAEA,MAFEI,IAAYC,MAAMI,EAAUN,SAASG,QACxCN,OAGH,QAGTW,iBAAA,WAAmB,IACTC,EAASd,KAAKJ,MAAdkB,KACR,OAAOd,KAAKe,MACRf,KAAKe,MAELC,QAAMC,KAAKH,EAAKI,gBAAgBH,UAGtCP,OAAA,SAAON,GAAO,IAAAiB,EAAAnB,KAQZ,OAPAA,KAAKe,MAAQf,KAAKa,mBACFb,KAAKe,MAElBP,OAAON,EAAO,CAAEkB,QAAQ,IAExBC,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,IAAH,OAAaJ,EAAKJ,MAAMS,cAAcC,OAAOF,QAKtDG,OAAA,WAAS,IAAAC,EACoB3B,KAAKC,MAAxBC,EADDyB,EACCzB,MAAOC,EADRwB,EACQxB,QACf,OACEyB,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,KACEF,OAAAC,EAAA,EAAAD,CAACG,EAAA,EAAD,CAAKC,MAAM,SAASC,SAAU,oBAC9BL,OAAAC,EAAA,EAAAD,CAAA,iCAA4B1B,GAC3BC,EAAQkB,IAAI,SAAAa,GAAI,OACfN,OAAAC,EAAA,EAAAD,CAAA,WAASO,IAAKD,EAAKE,MACjBR,OAAAC,EAAA,EAAAD,CAAA,UACEA,OAAAC,EAAA,EAAAD,CAACS,EAAA,KAAD,CACEC,IAAGC,EAGHC,GAAIN,EAAKE,MAERF,EAAKF,QAGVJ,OAAAC,EAAA,EAAAD,CAAA,SACGM,EAAKO,QAAS,IACfb,OAAAC,EAAA,EAAAD,CAACS,EAAA,KAAD,CACEC,IAAGI,EAGHF,GAAIN,EAAKE,MAJX,+BApE0BO,IAAMC,WAoFjC1C,EAAK,YAQlBP,EAAWkD,UAAY,CACrB/B,KAAMgC,IAAUC,MAAM,CACpB7B,gBAAiB4B,IAAUC,MAAM,CAC/BhC,MAAO+B,IAAUC,MAAM,CAAEvB,cAAesB,IAAUC,MAAM,IAAIC,aAAcA,aACzEA,aACFA,WACH3C,SAAUyC,IAAUC,MAAM,CACxBvC,OAAQsC,IAAUG,SACjBD","file":"component---src-pages-search-jsx-43cbac6208077a1c5c42.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, Link } from 'gatsby';\nimport { css } from '@emotion/core';\nimport { Index } from 'elasticlunr';\nimport queryString from 'query-string';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\n\nexport default class SearchPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      query: '',\n      results: [],\n    };\n  }\n\n  componentDidMount() {\n    const { location } = this.props;\n    const qs = queryString.parse(location.search);\n    const { query } = qs;\n    const results = this.search(query);\n    this.setState({\n      query,\n      results,\n    });\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.location.search !== prevState.query) {\n      const qs = queryString.parse(nextProps.location.search);\n      const { query } = qs;\n      return { query };\n    }\n    return null;\n  }\n\n  getOrCreateIndex() {\n    const { data } = this.props;\n    return this.index\n      ? this.index\n      : // Create an elastic lunr index and hydrate with graphql query results\n        Index.load(data.siteSearchIndex.index);\n  }\n\n  search(query) {\n    this.index = this.getOrCreateIndex();\n    const results = this.index\n      // Query the index with search string to get an [] of IDs\n      .search(query, { expand: true })\n      // Map over each ID and return the full document\n      .map(({ ref }) => this.index.documentStore.getDoc(ref));\n\n    return results;\n  }\n\n  render() {\n    const { query, results } = this.state;\n    return (\n      <Layout>\n        <SEO title=\"Search\" keywords={[`search`, `ICAT`]} />\n        <h1>{`Search Results for: ${query}`}</h1>\n        {results.map(page => (\n          <article key={page.slug}>\n            <h2>\n              <Link\n                css={css`\n                  color: green;\n                `}\n                to={page.slug}\n              >\n                {page.title}\n              </Link>\n            </h2>\n            <p>\n              {page.excerpt}{' '}\n              <Link\n                css={css`\n                  color: green;\n                `}\n                to={page.slug}\n              >\n                Continue reading â†’\n              </Link>\n            </p>\n          </article>\n        ))}\n      </Layout>\n    );\n  }\n}\n\nexport const query = graphql`\n  query SearchIndexQuery {\n    siteSearchIndex {\n      index\n    }\n  }\n`;\n\nSearchPage.propTypes = {\n  data: PropTypes.shape({\n    siteSearchIndex: PropTypes.shape({\n      index: PropTypes.shape({ documentStore: PropTypes.shape({}).isRequired }).isRequired,\n    }).isRequired,\n  }).isRequired,\n  location: PropTypes.shape({\n    search: PropTypes.string,\n  }).isRequired,\n};\n"],"sourceRoot":""}